//----------------------------------------------------------------------------
//
//	ボタン
//
//														 制作者：劉喆
//                                                       作成日：2017/11/29
//----------------------------------------------------------------------------
#ifndef BTN_H
#define BTN_H

//---------------------------インクルード-------------------------------------
#include "Note.h"

//---------------------------マクロ定義---------------------------------------
#define NUM_BTN_NORMAL			(4)
#define NUM_BTN					(6)

//---------------------------列挙型定義---------------------------------------
typedef enum {
	JCNBN_00,							// 複数ボタン01番
	JCNBN_01,							// 複数ボタン02番
	JCNBN_02,							// 複数ボタン03番
	JCNBN_MAX							// 複数ボタンの最大数
}JOYCON_NORMAL_BTN_NUM;					// 複数ボタン対応操作


//---------------------------構造体定義---------------------------------------
typedef struct {
	D3DXVECTOR3 vPos;					// 座標
	int nKeyNum;						// キー番号
	int nKeyNumSpecial[NFD_MAX];		// キー番号(特殊)
	int nBtnDirection;					// ボタンの方向
	int nJoyConKeyNum[JCNBN_MAX];		// コントローラーのキー番号
	float fJoyConAngle;					// コントローラースティックの角度
	float fJoyConLength;				// コントローラースティックは原点から離れている距離
	float fJoyConAngleOld;				// コントローラースティックの角度(記録用)
	float fJoyConLengthOld;				// コントローラースティックは原点から離れている距離(記録用)
	int nA;								// α値
	int nCount;							// カウント
	int nCountReleaseFlag;				// リリースフラグカウンター
	bool bStatus;						// 描画状態
	int nTriggerTiming;					// 押す時間
	int nReleaseTiming;					// 離す時間
	D3DCOLOR dColor;					// 色
}BTN;									// ボタン	

//---------------------------プロトタイプ宣言---------------------------------
void InitBtn();
void UninitBtn();
void UpdateBtn();
void UpdateBtnAuto();
void DrawBtn();

void UpdateBtnHoldFlag();

//------------------------------------------------------------------------------
//	関数名:	GetBtn
//	引数:	レーン番号
//	戻り値:	ボタン情報
//	説明:	指定したレーンのボタン情報を取得する
//------------------------------------------------------------------------------
BTN GetBtn(int nNum);

//------------------------------------------------------------------------------
//	関数名:	SetBtnTriggerTime
//	引数:	レーン番号　タイミングの値
//	戻り値:	なし
//	説明:	指定したレーンの押すタイミングを設定する
//------------------------------------------------------------------------------
void SetBtnTriggerTime(int nNum, int nTime);

//------------------------------------------------------------------------------
//	関数名:	SetBtnReleaseTime
//	引数:	レーン番号　タイミングの値
//	戻り値:	なし
//	説明:	指定したレーンの離すタイミングを設定する
//------------------------------------------------------------------------------
void SetBtnReleaseTime(int nNum, int nTime);

//------------------------------------------------------------------------------
//	関数名:	SetBtnDirect
//	引数:	レーン番号　方向
//	戻り値:	なし
//	説明:	指定したレーンの方向を設定する
//------------------------------------------------------------------------------
void SetBtnDirect(int nNum, int nDirect);
 
//------------------------------------------------------------------------------
//	関数名:	SetAutoPlay
//	引数:	オート状態
//	戻り値:	なし
//	説明:	オート状態を設定する
//------------------------------------------------------------------------------
void SetAutoPlay(bool bStatus);

//------------------------------------------------------------------------------
//	関数名:	GetAutoPlay
//	引数:	なし
//	戻り値:	オート状態
//	説明:	オート状態を取得する
//------------------------------------------------------------------------------
bool GetAutoPlay();

//------------------------------------------------------------------------------
//	関数名:	SetBtnColor
//	引数:	レーン番号　判定レベル
//	戻り値:	なし
//	説明:	指定されたレーンのボタン色を設定する
//------------------------------------------------------------------------------
void SetBtnColor(int nBtn, int nJudgeLevel);

#endif // !BTN_H
