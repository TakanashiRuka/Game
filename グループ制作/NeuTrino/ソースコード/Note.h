//----------------------------------------------------------------------------
//
//	ノーツ
//
//														 制作者：劉喆
//                                                       作成日：2017/11/30
//----------------------------------------------------------------------------

#ifndef NOTE_H
#define NOTE_H

//---------------------------マクロ定義---------------------------------------
#define NOTE_X					(-152.5f)
#define NOTE_Y					(0.0003f)
#define NOTE_Z					(0.0f)

#define NOTE_FLICK_X			(-101.625f)

#define NOTE_RANGE_X			(101.75f)
#define MAX_NOTE_PER_LANE		(500)				// レーンごとに音符の最大数

#define NOTE_SLIDE_Y_MAX		(100.0f)
#define NOTE_SLIDE_Y_MIN		(1.0f)

#define NOTE_SPEED_N			(0.3f)				// 音符スピード常数

#define DRAW_NOTE_START			(2000.0f)			// 音符の描画開始座標
#define DRAW_NOTE_END			(-500.0f)			// 音符の描画終了座標

//---------------------------列挙型定義---------------------------------------
typedef enum {
	NT_TAP,						// タップ
	NT_BREAK,					// ブレイク
	NT_HOLD,					// ホールド
	NT_FLICK,					// フリック
	NT_SLIDE,					// スライド
	NT_MAX						// 最大種類
}NOTE_TYPE;						// 音符の種類

typedef enum {
	NDS_START,					// 描画開始部分
	NDS_MIDDLE,					// 描画中間部分
	NDS_END,					// 描画終了部分
	NDS_MAX						// 最大構成
}NOTE_DRAW_STATUS;				// 音符の描画状態の構成

typedef enum {
	NJS_START,					// 判定開始部分
	NJS_END,					// 判定終了部分
	NJS_MAX						// 最大構成
}NOTE_JUDGE_STATUS;				// 音符の判定状態の構成

typedef enum {
	NFD_UP,						// フリックの方向(上)
	NFD_DOWN,					// フリックの方向(下)
	NFD_LEFT,					// フリックの方向(左)
	NFD_RIGHT,					// フリックの方向(右)
	NFD_MAX						// フリックの方向(最大値)
}NOTE_FLICK_DIRECTION;			// フリックの方向

typedef enum {
	NSL_LEFT,					// スライドのレーン番号(左)
	NSL_RIGHT,					// スライドのレーン番号(右)
	NSL_MAX						// スライドのレーン番号(最大値)
}NOTE_SLIDE_LANE;				// スライドのレーン番号

typedef enum {
	NSP_LEFT_UP,				// スライドの座標(左上)
	NSP_RIGHT_UP,				// スライドの座標(右上)
	NSP_LEFT_DOWN,				// スライドの座標(左下)
	NSP_RIGHT_DOWN,				// スライドの座標(右下)
	NSP_MAX						// スライドの座標(最大値)
}NOTE_SLIDE_POS;				// スライドの座標

//---------------------------構造体定義---------------------------------------
typedef struct {
	D3DXVECTOR3 vPos[NDS_MAX];				// 座標
	D3DXVECTOR3 vSlideMiddlePos[NSP_MAX];	// スライドの頂点座標
	D3DXVECTOR3 vSlideShadowPos[NSP_MAX];	// スライドの影の頂点座標
	unsigned int nType;						// 音符の種類
	unsigned int nTexNum[NDS_MAX];			// テクスチャ番号
	float fHoldH[NDS_MAX];					// ホールドの長さ
	int nTiming[NJS_MAX];					// 判定時間
	int nTimingHoldMiddle;					// ホールド中間の判定時間
	unsigned int nTimingHoldMiddleMax;		// ホールド中間の判定時間の最大値
	unsigned int nHoldNum;					// ホールド音符の数
	int nHoldA;								// ホールドのα値
	int nHoldBlendFactorA;					// ホールド加算合成のα値
	int nCountHoldBlendFactor;				// ホールド加算合成のカウンター
	int nFlickDirection;					// フリックの方向
	int nSlidePointPosNum[NJS_MAX];			// スライドの節点座標の番号
	int nSlideNum;							// スライド音符の番号(α値調整用)
	int nNumOfLine[NJS_MAX];				// 小節の番号
	int nNumOfNote[NJS_MAX];				// 音符の番号
	bool bSlideArrowDrawStatus;				// スライド音符の矢印描画状態
	bool bSlideStartEndFlag[NJS_MAX];		// スライドの開始/終了フラグ
	bool bHoldBlendFactor;					// ホールド加算合成の状態
	bool bDrawStatus[NDS_MAX];				// 描画状態
	bool bJudgeStatus[NJS_MAX];				// 判定状態
	bool bDrawShadow;						// 影の描画状態
}NOTE;										// ノーツ

//---------------------------プロトタイプ宣言---------------------------------
void InitNote();
void UninitNote();
void UpdateNote();
void DrawNote();

void SetNote();

void DrawDebugMaxNote();

void InitNoteFlickArrow();
void UpdateNoteFlickArrow();

void UpdateBreakEffect();

//------------------------------------------------------------------------------
//	関数名:	SetMaxNote
//	引数:	なし
//	戻り値:	なし
//	説明:	最大音符数を計算する
//------------------------------------------------------------------------------
void SetMaxNote();

//------------------------------------------------------------------------------
//	関数名:	GetMaxNote
//	引数:	なし
//	戻り値:	最大音符数
//	説明:	最大音符数を取得する
//------------------------------------------------------------------------------
int GetMaxNote();

//------------------------------------------------------------------------------
//	関数名:	GetNoteNaxNum
//	引数:	レーン番号
//	戻り値:	最大音符数
//	説明:	指定したレーンの最大音符数を取得する
//------------------------------------------------------------------------------
int GetNoteMaxNum(int nNum);

//------------------------------------------------------------------------------
//	関数名:	GetJudgeNoteNum
//	引数:	レーン番号
//	戻り値:	判定すべき音符の番号
//	説明:	指定したレーンの判定すべき音符の番号を取得する
//------------------------------------------------------------------------------
int GetJudgeNoteNum(int nNum);

//------------------------------------------------------------------------------
//	関数名:	SetJudgeNoteNum
//	引数:	レーン番号　変化させる数値
//	戻り値:	なし
//	説明:	指定したレーンの判定すべき音符の番号を変化する
//------------------------------------------------------------------------------
void SetJudgeNoteNum(int nNum, int nChangeNum);

//------------------------------------------------------------------------------
//	関数名:	SetNoteJudgeStatus
//	引数:	レーン番号　音符番号　判定部分　変化させる状態
//	戻り値:	なし
//	説明:	指定したレーンと音符の判定状態を変化する
//------------------------------------------------------------------------------
void SetNoteJudgeStatus(int nNum, int nNoteNum, int nParts, bool bStatus);

//------------------------------------------------------------------------------
//	関数名:	SetNoteDrawStatus
//	引数:	レーン番号　音符番号　描画部分　変化させる状態
//	戻り値:	なし
//	説明:	指定したレーンと音符の描画状態を変化する
//------------------------------------------------------------------------------
void SetNoteDrawStatus(int nNum, int nNoteNum, int nParts, bool bStatus);

//------------------------------------------------------------------------------
//	関数名:	GetNote
//	引数:	レーン番号　音符番号
//	戻り値:	音符の情報
//	説明:	指定したレーンと音符の情報を取得する
//------------------------------------------------------------------------------
NOTE GetNote(int nNum, int nNoteNum);

//------------------------------------------------------------------------------
//	関数名:	SetHoldMiddleTime
//	引数:	レーン番号　音符番号　変化させる数値(ms)
//	戻り値:	なし
//	説明:	指定したレーンと音符のホールド中間判定時間を変化する
//------------------------------------------------------------------------------
void SetHoldMiddleTime(int nNum, int nNoteNum, int nTimeChange);

//------------------------------------------------------------------------------
//	関数名:	SetHoldAlpha
//	引数:	レーン番号　音符番号　変化させる数値
//	戻り値:	なし
//	説明:	指定したレーンと音符のホールドのα値を変化する
//------------------------------------------------------------------------------
void SetHoldAlpha(int nNum, int nNoteNum, int nA);

//------------------------------------------------------------------------------
//	関数名:	SetHoldBlendFactor
//	引数:	レーン番号　音符番号　変化させる状態
//	戻り値:	なし
//	説明:	指定したレーンと音符のホールドのα値の加算合成状態を変化する
//------------------------------------------------------------------------------
void SetHoldBlendFactor(int nNum, int nNoteNum, bool bStatus);

//------------------------------------------------------------------------------
//	関数名:	GetSlidePos
//	引数:	レーン番号
//	戻り値:	なし
//	説明:	指定したレーンのスライド音符の座標を取得する
//------------------------------------------------------------------------------
D3DXVECTOR3 GetSlidePos(int nNum);

//------------------------------------------------------------------------------
//	関数名:	SetNoteLineAndNum
//	引数:	レーン番号　音符の番号　小節の番号　この小節の音符の番号　NJSの番号
//	戻り値:	なし
//	説明:	指定したレーンと音符の小節番号を音符の番号を設定する
//------------------------------------------------------------------------------
void SetNoteLineAndNum(int nLaneNum, int nNoteNum, int nLine, int nNum, int nNJSNum);

//------------------------------------------------------------------------------
//	関数名:	SetNoteType
//	引数:	レーン番号　音符の番号　音符の種類
//	戻り値:	なし
//	説明:	指定したレーンと音符の小節番号を音符の種類を設定する
//------------------------------------------------------------------------------
void SetNoteType(int nLaneNum, int nNoteNum, int nType);

//------------------------------------------------------------------------------
//	関数名:	SetMaxNotePerCh
//	引数:	レーン番号　音符の数
//	戻り値:	なし
//	説明:	指定したレーンの最大音符数を設定する
//------------------------------------------------------------------------------
void SetMaxNotePerCh(int nLaneNum, int nNoteNum);

//------------------------------------------------------------------------------
//	関数名:	SetNoteTime
//	引数:	レーン番号　音符の番号　タイミング　NJS番号
//	戻り値:	なし
//	説明:	指定したレーンの最大音符数を設定する
//------------------------------------------------------------------------------
void SetNoteTime(int nLaneNum, int nNoteNum, int nTime, int nNJSNum);

//------------------------------------------------------------------------------
//	関数名:	SetNoteDirect
//	引数:	レーン番号　音符の番号　方向
//	戻り値:	なし
//	説明:	指定したレーンと音符の方向を設定する
//------------------------------------------------------------------------------
void SetNoteDirect(int nLaneNum, int nNoteNum, int nDirect);

//------------------------------------------------------------------------------
//	関数名:	SetSlidePointPosNum
//	引数:	レーン番号　音符の番号　節点番号　NJS番号
//	戻り値:	なし
//	説明:	指定したレーンと音符の節点番号を設定する
//------------------------------------------------------------------------------
void SetSlidePointPosNum(int nLaneNum, int nNoteNum, int nPosNum, int nNJSNum);

//------------------------------------------------------------------------------
//	関数名:	SetSlideStartEndFlag
//	引数:	レーン番号　音符の番号　開始終了フラグ　NJS番号
//	戻り値:	なし
//	説明:	指定したレーンと音符の節点番号を設定する
//------------------------------------------------------------------------------
void SetSlideStartEndFlag(int nLaneNum, int nNoteNum, bool bFlag, int nNJSNum);

//------------------------------------------------------------------------------
//	関数名:	SetNoteOffset
//	引数:	タイミングの変化値
//	戻り値:	なし
//	説明:	指定したレーンと音符の節点番号を設定する
//------------------------------------------------------------------------------
void SetNoteOffset(int nChange);

//------------------------------------------------------------------------------
//	関数名:	ResetNoteStatus
//	引数:	なし
//	戻り値:	なし
//	説明:	すべての音符の描画/判定属性を再設定する
//------------------------------------------------------------------------------
void ResetNoteStatus();

//------------------------------------------------------------------------------
//	関数名:	SetMaxNotePerType
//	引数:	なし
//	戻り値:	なし
//	説明:	すべての音符の種類ごとに最大数を設定する
//------------------------------------------------------------------------------
void SetMaxNotePerType();

//------------------------------------------------------------------------------
//	関数名:	GetMaxNotePerType
//	引数:	音符の種類
//	戻り値: 指定された音符の最大数
//	説明:	すべての音符の種類ごとに最大数を取得する
//------------------------------------------------------------------------------
int GetNoteNumPerType(int nType);

//------------------------------------------------------------------------------
//	関数名:	GetHiSpeed
//	引数:	なし
//	戻り値:	音符の流れ速さ
//	説明:	音符の流れ速さを取得する
//------------------------------------------------------------------------------
float GetHiSpeed();

//------------------------------------------------------------------------------
//	関数名:	SetHiSpeed
//	引数:	スピードの増加量
//	戻り値:	なし
//	説明:	音符の流れ速さを変更する
//------------------------------------------------------------------------------
void SetHiSpeed(float fAdd);

//------------------------------------------------------------------------------
//	関数名:	SetNoteSlideNum
//	引数:	レーン番号　音符の番号　スライド音符の番号
//	戻り値:	なし
//	説明:	指定したレーンと音符のスライド音符の番号を設定する
//------------------------------------------------------------------------------
void SetNoteSlideNum(int nLaneNum, int nNoteNum, int nSlideNum);

//------------------------------------------------------------------------------
//	関数名:	GetOffsetNote
//	引数:	なし
//	戻り値:	音符のずれるタイミング
//	説明:	音符のずれるタイミングを取得する
//------------------------------------------------------------------------------
int GetOffsetNote();

//------------------------------------------------------------------------------
//	関数名:	SetOffsetNote
//	引数:	タイミングの変化値
//	戻り値:	なし
//	説明:	音符のずれるタイミングを変更する
//------------------------------------------------------------------------------
void SetOffsetNote(int nAdd);

#endif // !NOTE_H

